dorunrun.py:39:def dorunrun(command:Union[str, list],
fileutils.py:48:def all_dirs_in(s:str, depth:int=0) -> str:
fileutils.py:60:def all_files_in(s:str, include_hidden:bool=False) -> str:
fileutils.py:73:def all_files_like(s:str) -> str:
fileutils.py:82:def all_module_files() -> str:
fileutils.py:95:def build_file_list(f:str) -> List[str]:
fileutils.py:116:def date_filter(filename:str, *, 
fileutils.py:188:def expandall(s:str) -> str:
fileutils.py:200:def fclose_all() -> None:
fileutils.py:208:def file_name_filter(filename:str, env:str='.') -> str:
fileutils.py:229:def get_file_page(path:str,num_bytes:int=resource.getpagesize()) -> str: 
fileutils.py:250:def get_file_type(path:str) -> str:
fileutils.py:272:def got_data(filenames:str) -> bool:
fileutils.py:287:def home_and_away(filename:str) -> str:
fileutils.py:314:def is_hidden(path:str) -> bool:
fileutils.py:321:def is_PDF(o:Union[bytes,str]) -> bool:
fileutils.py:353:def lines_in_file(filename:str) -> int:
fileutils.py:377:def make_dir_or_die(dirname:str, mode:int=0o700) -> None:
fileutils.py:416:def path_join(dir_part:str, file_part:str) -> str:
fileutils.py:442:def random_file(name_prefix:str, *, length:int=None, break_on:str=None) -> tuple:
fileutils.py:475:def random_string(length:int=10, want_bytes:bool=False, all_alpha:bool=True) -> str:
fileutils.py:490:def read_whitespace_file(filename:str) -> tuple:
fname.py:43:defined.
linuxutils.py:71:def byte_scale(i:int, key:str='X') -> str:
linuxutils.py:90:def bytes2human(n:int) -> str:
linuxutils.py:107:def byte_size(s:str) -> int:
linuxutils.py:130:def columns() -> int:
linuxutils.py:144:def cpucounter() -> int:
linuxutils.py:153:def dorunrun(command:Union[str, list],
linuxutils.py:228:def dump_cmdline(args:argparse.ArgumentParser, return_it:bool=False, split_it:bool=False) -> str:
linuxutils.py:371:def explain(code:int) -> str:
linuxutils.py:387:def getallgroups():
linuxutils.py:394:def getgroups(u:str) -> tuple:
linuxutils.py:404:def getproctitle() -> str:
linuxutils.py:415:def getusers_in_group(g:str) -> tuple:
linuxutils.py:422:def group_exists(g:str) -> bool:
linuxutils.py:433:def hms_to_hours(hms:str) -> float:
linuxutils.py:453:def hours_to_hms(h:float) -> str:
linuxutils.py:475:def iso_time(seconds:int) -> str:
linuxutils.py:479:def iso_seconds(timestring:str) -> int:
linuxutils.py:487:def memavail() -> float:
linuxutils.py:497:def mygroups() -> Tuple[str]:
linuxutils.py:509:def now_as_seconds() -> int:
linuxutils.py:513:def now_as_string() -> str:
linuxutils.py:522:def parse_proc(pid:int) -> dict:
linuxutils.py:553:def pids_of(process_name:str, anywhere:Any=None) -> list:
linuxutils.py:575:def script_driven() -> bool:
linuxutils.py:584:def setproctitle(s:str) -> str:
linuxutils.py:603:def signal_name(i:int) -> str:
linuxutils.py:614:def sloppy(o:object) -> SloppyDict:
linuxutils.py:654:def deepsloppy(o:dict) -> Union[SloppyDict, object]:
linuxutils.py:691:def snooze(n:int) -> int:
linuxutils.py:711:def splitter(group:Iterable, num_chunks:int) -> Iterable:
linuxutils.py:741:def squeal(s: str=None, rectus: bool=True, source=None) -> str:
linuxutils.py:761:def stalk_and_kill(process_name:str) -> bool:
linuxutils.py:919:def this_function():
linuxutils.py:925:def this_is_the_time(current_minute:int, schedule:list) -> bool:
linuxutils.py:938:def this_line(level: int=1, invert: bool=True) -> int:
linuxutils.py:957:def time_print(s:str) -> None:
linuxutils.py:961:def time_match(t, set_of_times:list) -> bool:
linuxutils.py:973:def tombstone(args:Any=None, silent:bool=False) -> Tuple[int, str]:
linuxutils.py:1005:def trap_signals(ignore_list:list=std_ignore,
linuxutils.py:1021:def type_and_text(e:Exception) -> str:
linuxutils.py:1044:def unwhite(s: str) -> str:
linuxutils.py:1053:def user_from_uid(uid:int) -> str:
linuxutils.py:1061:def valid_item_name(s:str) -> bool:
linuxutils.py:1070:def version(full:bool = True) -> str:
linuxutils.py:1097:def wall(s: str):
linuxutils.py:1102:def whereami() -> str:
linuxutils.py:1116:def whoami() -> None:
netutils.py:13:def get_ssh_host_info(host_name:str=None, config_file:str=None) -> List[Dict]:
rules.py:33:def NOP(o:object): return o
rules.py:76:def program_basename(t:SloppyTree) -> SloppyTree:
rules.py:85:def program_launch(t:SloppyTree) -> SloppyTree:
rules.py:90:def program_jobfile(t:SloppyTree) -> SloppyTree:
rules.py:101:def find_software() -> SloppyTree:
setutils.py:33:def notlikeanyof(search_term:str, sock_drawer:Iterable) -> bool:
setutils.py:44:def nothinglikeit(search_term:str, sock_drawer:Iterable) -> bool:
setutils.py:56:def set_encoder(obj:Any) -> str:
setutils.py:69:def setify(obj):
slurmutils.py:54:def get_jobname(s:str) -> str:
slurmutils.py:62:def hms_to_hours(hms:str) -> float:
slurmutils.py:82:def hours_to_hms(h:float) -> str:
slurmutils.py:100:def parse_sinfo(params:SloppyTree=None) -> SloppyTree:
slurmutils.py:158:def stat(jobid:Union[int,str]) -> SloppyTree:
slurmutils.py:211:def stat_all() -> Dict[int, SloppyTree]:
urdecorators.py:38:def null_decorator(o:object) -> object:
urdecorators.py:45:def show_exceptions(func:object) -> object:
urdecorators.py:63:def show_exceptions_and_frames(func:object) -> None:
urpacker.py:34:def set_to_list(o:object) -> object:
urpacker.py:42:def brine(o:object, force_bytes=False) -> str:
urpacker.py:56:def unbrine(s:str) -> object:
urtunnel.py:46:def drill_baby_drill(remote_host_info:uu.SloppyDict, password:str=None) -> SSHClient:
urtunnel.py:63:def _getSSHConnection(info:uu.SloppyDict, sock=None, password:str=None) -> object:
whocalled.py:67:def whocalledme(s:list=None) -> dict:
